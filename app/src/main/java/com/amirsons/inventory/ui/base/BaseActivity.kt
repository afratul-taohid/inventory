package com.amirsons.inventory.ui.baseimport android.app.ProgressDialogimport android.content.Contextimport android.content.Intentimport android.os.Bundleimport android.util.Logimport android.util.SparseArrayimport android.view.Viewimport android.widget.Toastimport androidx.annotation.IdResimport androidx.annotation.LayoutResimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.widget.Toolbarimport androidx.fragment.app.Fragmentimport com.amirsons.inventory.event.OnActivityResultListenerimport com.amirsons.inventory.utils.MyUtilsimport com.amirsons.inventory.ui.widgets.MySnackBarimport uk.co.chrisjenx.calligraphy.CalligraphyContextWrapperimport java.util.concurrent.atomic.AtomicInteger/** * Created by TAOHID on 20,September,2018 * Email: taohid32@gmail.com */abstract class BaseActivity : AppCompatActivity() {    @get:LayoutRes    abstract val contentLayout: Int    private val activityResultListenerSparseArray = SparseArray<OnActivityResultListener>()    private val counter = AtomicInteger(0)    private lateinit var progressDialog : ProgressDialog    lateinit var TAG: String    override fun attachBaseContext(newBase: Context) {        super.attachBaseContext(CalligraphyContextWrapper.wrap(newBase))    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(contentLayout)        // set the local class name as TAG for use log        TAG = localClassName        progressDialog = ProgressDialog(this)        progressDialog.setMessage("Loading...")        progressDialog.setCancelable(false)        progressDialog.setCanceledOnTouchOutside(false)    }    fun showProgressDialog() {        if (!progressDialog.isShowing) {            progressDialog.show()        }    }    fun showProgressDialog(message: String) {        progressDialog.setMessage(message)        showProgressDialog()    }    fun hideProgressDialog() {        if (progressDialog.isShowing) {            progressDialog.dismiss()        }    }    fun showToast(message: String) {        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()    }    fun showSnackMessage(message: String) {        MySnackBar.instance.setMessage(message).show(this)    }    fun showSnackMessage(message: String, actionText: String, onClickListener: View.OnClickListener) {        MySnackBar.instance                .setMessage(message)                .setActionText(actionText)                .setActionClickListener(onClickListener)                .show(this)    }    fun showSnackMessage(message: String, color: Int) {        MySnackBar.instance.setMessage(message).setTextColor(color).show(this)    }    fun printObject(`object`: Any) {        Log.wtf(TAG, MyUtils.objectPrettyPrint(`object`))    }    fun addFabFragment(fragment: Fragment, activeFragment: Fragment?, @IdRes container: Int): Fragment {        val fragmentTransaction = supportFragmentManager.beginTransaction()        // hide the active fragment        if (activeFragment != null) {            fragmentTransaction.detach(activeFragment)        }        val fragmentName = getFragmentNameFromFragment(fragment.javaClass)        // Do we already have this fragment?        val fragmentByTag = supportFragmentManager.findFragmentByTag(fragmentName)        return if (fragmentByTag != null) {            fragmentTransaction.attach(fragmentByTag)            fragmentTransaction.commit()            fragmentByTag        } else {            fragmentTransaction.add(container, fragment, fragmentName)            fragmentTransaction.commit()            fragment        }    }    fun getFragmentNameFromFragment(fragmentClassName: Class<*>): String {        val name = fragmentClassName.name        return name.substring(name.lastIndexOf(".") + 1)    }    fun <T> getFragmentByClassName(fragmentClassName: Class<T>): T? {        val fragmentName = getFragmentNameFromFragment(fragmentClassName)        return fragmentClassName.cast(supportFragmentManager.findFragmentByTag(fragmentName))    }    fun startActivityForResult(intent: Intent, resultListener: OnActivityResultListener) {        val requestCode = counter.incrementAndGet()        activityResultListenerSparseArray.put(requestCode, resultListener)        startActivityForResult(intent, requestCode)    }    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {        super.onActivityResult(requestCode, resultCode, data)        val resultListener = activityResultListenerSparseArray.get(requestCode)        if (resultListener != null) {            if (resultCode == RESULT_OK) {                resultListener.onResultSuccess(resultCode, data)            } else {                resultListener.onResultError(resultCode, data)            }        }    }    fun enableBackButton(toolbar: Toolbar) {        setSupportActionBar(toolbar)        supportActionBar?.setDisplayHomeAsUpEnabled(true)        supportActionBar?.setDisplayShowHomeEnabled(true)    }    override fun onPause() {        hideProgressDialog()        super.onPause()    }    override fun onSupportNavigateUp(): Boolean {        onBackPressed()        return true    }    override fun onBackPressed() {        hideProgressDialog()        super.onBackPressed()        finish()    }}